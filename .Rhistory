library(matching)
library(Matching)
detach("package:Matching", unload=TRUE)
library("Matching", lib.loc="~/R/win-library/3.1")
data(lalonde)
lalonde
View(lalonde)
subset(lalonde, black==1, hisp == 1)
subset(lalonde, black==1, hisp == 0)
subset(lalonde, black==1)
subset(lalonde, black==1 & hisp ==1)
subset(lalonde, black==1 & hisp ==0)
I(lalonde$re74)
i
I
I(lalonde$re74 * lalonde$re75)
data(lalonde)
attach(lalonde)
X = cbind(age, educ, black, hisp, married, nodegr, u74, u75, re75, re74)
X
BalanceMat <- cbind(age, educ, black, hisp, married, nodegr, u74, u75, re75, re74, I(re74 * re75))
BalanceMat
View(BalanceMat)
View(lalonde)
genout <- GenMatch(Tr=treat, X=X, BalanceMat = BalanceMat, estimand = "ATE", M=1, pop.size = 16, max.generations = 10, wait.generations = 1)
genout
install.packages("rgenoud")
genout <- GenMatch(Tr=treat, X=X, BalanceMat = BalanceMat, estimand = "ATE", M=1, pop.size = 16, max.generations = 10, wait.generations = 1)
summary(genout)
genout
Y = re78/1000
mout <- Match(Y=Y, Tr=treat, X=X, estimand = "ATE", Weight.matrix = genout)
mout
summary(mout)
mb <- MatchBalance(treat~age + educ + black + hisp + married + nodegr + u74 + u75 + re75 + re74 + I(re74*re75), match.out = mout, nboots = 500)
mb
summary(mb)
foo <- balanceUV(re75[treat==1], re75[treat!=1])
foo
summary(foo)
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
library(rMaps)
install.packages(c("car", "d3Network", "Formula", "knitr", "manipulate", "maptools", "psych", "Rcmdr", "Rcpp", "RgoogleMaps", "rmarkdown", "shiny"))
install.packages(c("boot", "class", "cluster", "KernSmooth", "nnet", "rpart", "spatial"), lib="C:/Documents and Settings/office/My Documents/R/R-3.1.2/library")
library("rMaps", lib.loc="~/R/win-library/3.1")
rMaps::Datamaps
web_index
data(web_index)
web_index
View(web_index)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
web_index$web_index
web_index$country
crosslet
crosslet$
\
?crosslet
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
library(rjson)
url <- "http://data.coa.gov.tw/Service/OpenData/DataFileService.aspx?UnitId=061"
food <- fromJSON(file=url, method="C")
ldply(food)
library(plyr)
ldply(food)
ldply(food, .(type))
ldply(food, .(type), summarize)
ldply(food, .(type), summarize, crop=crop)
matrix(food)
rbind.data.frame(food)
dlply(food, .())
ldply(food, .())
ldply(food)
ldply(food, .(type))
as.data.frame(food)
t<-as.data.frame(food)
t
View(t)
lapply(food)
lapply(food, function(x) x[-1])
t<-lapply(food, function(x) x[-1])
t
t<-data.frame(lapply(food, function(x) x[-1]))
t
View(t)
do.call("rbind.fill", lapply(food, as.data.frame))
t <- do.call("rbind.fill", lapply(food, as.data.frame))
t
View(t)
subset(t, month="1")
subset(t, month=="1")
subset(t, month=="2")
subset(t, month=="3")
subset(t, month=="4")
subset(t, select = c(type, month, crop, county, town))
a<-subset(t, select = c(type, month, crop, county, town))
ddply(a, .(crop), summarise, month=month, county=county, town=town)
ddply(a, .(crop), summarise, month=month, loc = interaction(county, town))
subset(t, town=="")
subset(t, town== NA)
ddply(a, .(crop), summarise, month=month, loc = interaction(city, town, sep = ""))
ddply(a, .(crop), summarise, month=month, loc = interaction(city, town, sep = ""))
ddply(a, .(crop), summarise, month=month, loc = interaction(cOunty, town, sep = ""))
ddply(a, .(crop), summarise, month=month, loc = interaction(city, town))
ddply(a, .(crop), summarise, month=month, loc = interaction(cOunty, town))
ddply(t, .(crop), summarise, month=month, loc = interaction(cOunty, town))
ddply(a, .(crop), summarise, month=month, loc = interaction(county, town))
ddply(a, .(crop), summarise, month=month, loc = interaction(county, town, sep=""))
ddply(a, .(crop), summarise, month=range(month))
ddply(a, .(crop), summarise, month=range(as.numeric(month)))
ddply(a, .(crop), summarise, month=month)
ddply(a, .(crop), summarise, month = summary(month))
ddply(a, .(crop), summarise)
ddply(a, .id=.(crop), summarise, )
ddply(a, .id= .(crop), summarise, month = summary(month))
ddply(a, .id = .(crop), summarise, month = summary(month))
ddply(a, .id = .(crop))
ddply(a, .id = .(crop), town = town)
ddply(a, .id = .(crop), summarize town = town)
ddply(a, .id = .(crop), summarize, town = town)
library(rjson)
library(plyr)
url <- "http://data.coa.gov.tw/Service/OpenData/AnimalOpenData.aspx"
data_list <- fromJSON(file = url, method = "C")
data <- data.frame(do.call(rbind, data_list))
View(data)
library(rjson)
library(plyr)
url <- "http://data.coa.gov.tw/Service/OpenData/DataFileService.aspx?UnitId=061"
data_list <- fromJSON(file = url, method = "C")
data <- data.frame(do.call(rbind, data_list))
data
View(data)
install.packages("plyr")
install.packages("ggplot2")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
install.packages("shiny")
install_github('rCharts', 'ramnathv')
require(devtools)
library(devtools)
library(devtools)
library(devtools)
require(devtools)
install_github('rCharts', 'ramnathv')
library(rSymPy)
sympy("var('x')")
sympy("y = x*x")
sympy("y")
sympy("limit(1/x, x, oo)")
sympy("y = x*x")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
detach("package:rmarkdown", unload=TRUE)
install.packages("rmarkdown")
install.packages("devtools")
install_github('rCharts', 'ramnathv')
require(devtools)
install.packages("git2r")
require(devtools)
remove.packages(c("git2r", "devtools", "rversions"))
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("git2r")
library(devtools)
library(devtools)
devtools::release()
traceback()
install.packages("git2r")
devtools::release()
remove.packages("devtools")
install.packages(devtools, dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
devtools::release()
shiny::runApp('Dropbox/git/communitymedcare')
